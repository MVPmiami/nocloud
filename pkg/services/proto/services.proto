/*
Copyright Â© 2021 Nikita Ivanovski info@slnt-opp.xyz

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
syntax = "proto3";
package nocloud.services;

option go_package = "github.com/slntopp/nocloud/pkg/services/proto";

import "google/protobuf/struct.proto";
import "pkg/instances/proto/instances.proto";

message Service {
    string uuid = 1;
    string version = 2;
    string title = 3;
    string status = 4;
    map<string, google.protobuf.Value> context = 5;
    map<string, nocloud.instances.InstancesGroup> instances_groups = 6;
    string hash = 7;
}

message TestConfigError {
    string error = 1; 
    string instance_group = 2;
    string instance = 3;
}

message TestConfigResponse {
    bool result = 1;
    repeated TestConfigError errors = 2; 
}

message CreateRequest {
    Service service = 1;
    string namespace = 2;
}

message UpdateRequest {
    string id = 1;
    string namespace = 2;
    Service service = 3;
}

message DeleteRequest {
    string id = 1;
}

message DeleteResponse {
    bool result = 1;
}

message PerformActionRequest {
    string id = 1;
    string action = 2;
    map<string, google.protobuf.Value> data = 3; 
}

message PerformActionResponse {
    bool result = 1;
    map<string, google.protobuf.Value> meta = 2; 
}

message UpRequest {
    string id = 1;
    map<string, string> deploy_policies = 2; // Map of InstanceGroup UUID to ServiceProvider
}

message UpError {
    map<string, string> data = 1;
}
message UpResponse {
    repeated UpError errors = 1;
}

message DownRequest {
    string id = 1;
}
message DownResponse {}

message ListRequest {
    optional string namespace = 1;
    optional int32 depth = 2;
}

message ListResponse {
    repeated Service pool = 1;
}

message GetRequest {
    string id = 1;
}

service ServicesService {
    rpc TestConfig(nocloud.services.CreateRequest) returns (nocloud.services.TestConfigResponse);
    rpc Create(nocloud.services.CreateRequest) returns (nocloud.services.Service);
    rpc Update(nocloud.services.UpdateRequest) returns (nocloud.services.Service);
    rpc Delete(nocloud.services.DeleteRequest) returns (nocloud.services.DeleteResponse);

    rpc Get(nocloud.services.GetRequest) returns (nocloud.services.Service);
    rpc List(nocloud.services.ListRequest) returns (nocloud.services.ListResponse);

    rpc Up(nocloud.services.UpRequest) returns (nocloud.services.UpResponse);
    rpc Down(nocloud.services.DownRequest) returns (nocloud.services.DownResponse);
    rpc PerformAction(nocloud.services.PerformActionRequest) returns (nocloud.services.PerformActionResponse);
}