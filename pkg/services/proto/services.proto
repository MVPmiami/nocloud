/*
Copyright Â© 2021 Nikita Ivanovski info@slnt-opp.xyz

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
syntax = "proto3";
package nocloud.services;

option go_package = "github.com/slntopp/nocloud/pkg/services/proto";

import "google/protobuf/struct.proto";
import "pkg/instances/proto/instances.proto";

message Service {
    string uuid = 1;
    string version = 2;
    string title = 3;
    string state = 4;
    map<string, google.protobuf.Value> context = 5;
    map<string, nocloud.instances.InstancesGroup> instances_groups = 6;
    string hash = 7;
}

message TestServiceConfigRequest {
    Service config = 1;
    string namespace = 2;
}

message TestServiceConfigError {
    string error = 1; 
    string instance_group = 2;
    string instance = 3;
}

message TestServiceConfigResponse {
    bool result = 1;
    repeated TestServiceConfigError errors = 2; 
}

message CreateServiceRequest {
    Service service = 1;
    string namespace = 2;
}

message CreateServiceResponse {
    string id = 1;
}

message UpdateServiceRequest {
    string id = 1;
    string namespace = 2;
    Service service = 3;
}

message UpdateServiceResponse {
    bool result = 1;
}

message DeleteServiceRequest {
    string id = 1;
}

message DeleteServiceResponse {
    bool result = 1;
}

message PerformServiceActionRequest {
    string id = 1;
    string action = 2;
    map<string, google.protobuf.Value> data = 3; 
}

message PerformServiceActionResponse {
    bool result = 1;
    map<string, google.protobuf.Value> meta = 2; 
}

service ServicesService {
    rpc TestServiceConfig(nocloud.services.TestServiceConfigRequest) returns (nocloud.services.TestServiceConfigResponse);
    rpc CreateService(nocloud.services.CreateServiceRequest) returns (nocloud.services.CreateServiceResponse);
    rpc UpdateService(nocloud.services.UpdateServiceRequest) returns (nocloud.services.UpdateServiceResponse);
    rpc DeleteService(nocloud.services.DeleteServiceRequest) returns (nocloud.services.DeleteServiceResponse);
    rpc PerformServiceAction(nocloud.services.PerformServiceActionRequest) returns (nocloud.services.PerformServiceActionResponse);
}