syntax = "proto3";
package nocloud.instances;

import "google/protobuf/struct.proto";
import "pkg/hasher/hasherpb/hasher.proto";

message Instance {
    string uuid = 1;
    string title = 2;
    map<string, google.protobuf.Value> config = 3
        [(nocloud.hasher.hashed) = true];
    map<string, google.protobuf.Value> resources = 4
        [(nocloud.hasher.hashed) = true];
    map<string, google.protobuf.Value> data = 5;
    InstanceState state = 6;
    string hash = 7 [(nocloud.hasher.hash) = true];
}

message InstancesGroup {
    string uuid = 1;
    string type = 2;
    map<string, google.protobuf.Value> config = 3
        [(nocloud.hasher.hashed) = true];
    repeated Instance instances = 4
        [(nocloud.hasher.hashed) = true];
    map<string, google.protobuf.Value> resources = 5
        [(nocloud.hasher.hashed) = true];
    map<string, google.protobuf.Value> data = 6;
    string hash = 7 [(nocloud.hasher.hash) = true];
}

message TestInstancesGroupConfigRequest {
    InstancesGroup group = 1;
}

message TestInstancesGroupConfigError {
    string error = 1;
    string instance = 2;
}

message TestInstancesGroupConfigResponse {
    bool result = 1;
    repeated TestInstancesGroupConfigError errors = 2;
}

// StatesService

enum NoCloudState {
    INIT = 0;
    UNKNOWN = 1;
    STOPPED = 2;
    RUNNING = 3;
    FAILED  = 4;
    DELETED = 5;
}

message InstanceState {
    NoCloudState state = 1; // NoCloud Instance State
    map<string, google.protobuf.Value> meta = 2; // Driver(Provider/Hypervisor) State data
}

message PostInstanceStateRequest {
    string uuid = 1;
    InstanceState state = 2;
}
message PostInstanceStateResponse {
    string uuid = 1;
    int64 result = 2;
    string error = 3;
}

message GetInstancesStatesRequest {
    repeated string instances = 1;
}
message GetInstancesStatesResponse {
    map<string, InstanceState> states = 1; // Map of Instance UUID to it's State
}

service StatesService {
    rpc PostInstanceState(PostInstanceStateRequest) returns (PostInstanceStateResponse) {};
    rpc GetInstancesStates(GetInstancesStatesRequest) returns (GetInstancesStatesResponse) {};
}