// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StatesServiceClient is the client API for StatesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StatesServiceClient interface {
	PostInstanceState(ctx context.Context, in *PostInstanceStateRequest, opts ...grpc.CallOption) (*PostInstanceStateResponse, error)
	GetInstancesStates(ctx context.Context, in *GetInstancesStatesRequest, opts ...grpc.CallOption) (*GetInstancesStatesResponse, error)
}

type statesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStatesServiceClient(cc grpc.ClientConnInterface) StatesServiceClient {
	return &statesServiceClient{cc}
}

func (c *statesServiceClient) PostInstanceState(ctx context.Context, in *PostInstanceStateRequest, opts ...grpc.CallOption) (*PostInstanceStateResponse, error) {
	out := new(PostInstanceStateResponse)
	err := c.cc.Invoke(ctx, "/nocloud.instances.StatesService/PostInstanceState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statesServiceClient) GetInstancesStates(ctx context.Context, in *GetInstancesStatesRequest, opts ...grpc.CallOption) (*GetInstancesStatesResponse, error) {
	out := new(GetInstancesStatesResponse)
	err := c.cc.Invoke(ctx, "/nocloud.instances.StatesService/GetInstancesStates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StatesServiceServer is the server API for StatesService service.
// All implementations must embed UnimplementedStatesServiceServer
// for forward compatibility
type StatesServiceServer interface {
	PostInstanceState(context.Context, *PostInstanceStateRequest) (*PostInstanceStateResponse, error)
	GetInstancesStates(context.Context, *GetInstancesStatesRequest) (*GetInstancesStatesResponse, error)
	mustEmbedUnimplementedStatesServiceServer()
}

// UnimplementedStatesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStatesServiceServer struct {
}

func (UnimplementedStatesServiceServer) PostInstanceState(context.Context, *PostInstanceStateRequest) (*PostInstanceStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostInstanceState not implemented")
}
func (UnimplementedStatesServiceServer) GetInstancesStates(context.Context, *GetInstancesStatesRequest) (*GetInstancesStatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInstancesStates not implemented")
}
func (UnimplementedStatesServiceServer) mustEmbedUnimplementedStatesServiceServer() {}

// UnsafeStatesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StatesServiceServer will
// result in compilation errors.
type UnsafeStatesServiceServer interface {
	mustEmbedUnimplementedStatesServiceServer()
}

func RegisterStatesServiceServer(s grpc.ServiceRegistrar, srv StatesServiceServer) {
	s.RegisterService(&StatesService_ServiceDesc, srv)
}

func _StatesService_PostInstanceState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostInstanceStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatesServiceServer).PostInstanceState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nocloud.instances.StatesService/PostInstanceState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatesServiceServer).PostInstanceState(ctx, req.(*PostInstanceStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatesService_GetInstancesStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInstancesStatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatesServiceServer).GetInstancesStates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nocloud.instances.StatesService/GetInstancesStates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatesServiceServer).GetInstancesStates(ctx, req.(*GetInstancesStatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StatesService_ServiceDesc is the grpc.ServiceDesc for StatesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StatesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nocloud.instances.StatesService",
	HandlerType: (*StatesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostInstanceState",
			Handler:    _StatesService_PostInstanceState_Handler,
		},
		{
			MethodName: "GetInstancesStates",
			Handler:    _StatesService_GetInstancesStates_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/instances/proto/instances.proto",
}
