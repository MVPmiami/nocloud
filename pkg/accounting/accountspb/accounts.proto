/*
Copyright Â© 2021 Nikita Ivanovski info@slnt-opp.xyz

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
syntax = "proto3";
package nocloud.accounts;

message Credentials {
    string type = 1;
    repeated string data = 2;
}

message CreateRequest {
    string title = 1; // New Account title
    Credentials auth = 2; // Credentials for New Account
    string namespace = 3; // Namespace to put Account under
    optional int32 access = 4; // Account access level to parent namespace
}

message CreateResponse {
    string id = 1;
}

message GetRequest {
    string id = 1;
}

message Account {
    string id = 1;
    string title = 2;
}

message UpdateResponse {
    bool result = 1;
}

message ListRequest {
    optional string namespace = 1; // Namespace ID to seek account in
    optional int32 depth = 2; // Depth 
}

message ListResponse {
    repeated Account pool = 1;
}

message SetCredentialsRequest {
    string account = 1;
    Credentials auth = 2;
}

message SetCredentialsResponse {
    bool result = 1;
}

message TokenRequest {
    Credentials auth = 1;
    int32 exp = 2;
}

message TokenResponse {
    string token = 1;
}

message DeleteRequest {
    string id = 1;
}

message DeleteResponse {
    bool result = 1;
}

service AccountsService {
    rpc Token(nocloud.accounts.TokenRequest) returns (nocloud.accounts.TokenResponse);
    rpc SetCredentials(nocloud.accounts.SetCredentialsRequest) returns (nocloud.accounts.SetCredentialsResponse);
    rpc Create(nocloud.accounts.CreateRequest) returns (nocloud.accounts.CreateResponse);
    rpc Update(nocloud.accounts.Account) returns (nocloud.accounts.UpdateResponse);
    rpc Get(nocloud.accounts.GetRequest) returns (nocloud.accounts.Account);
    rpc List(nocloud.accounts.ListRequest) returns (nocloud.accounts.ListResponse);
    rpc Delete(nocloud.accounts.DeleteRequest) returns (nocloud.accounts.DeleteResponse);
}